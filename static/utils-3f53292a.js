let t;const o=new Uint8Array(16);function r(){if(!t&&(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!t))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(o)}const n=[];for(let i=0;i<256;++i)n.push((i+256).toString(16).slice(1));const e={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function s(t,o,s){if(e.randomUUID&&!o&&!t)return e.randomUUID();const a=(t=t||{}).random||(t.rng||r)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,o){s=s||0;for(let t=0;t<16;++t)o[s+t]=a[t];return o}return function(t,o=0){return(n[t[o+0]]+n[t[o+1]]+n[t[o+2]]+n[t[o+3]]+"-"+n[t[o+4]]+n[t[o+5]]+"-"+n[t[o+6]]+n[t[o+7]]+"-"+n[t[o+8]]+n[t[o+9]]+"-"+n[t[o+10]]+n[t[o+11]]+n[t[o+12]]+n[t[o+13]]+n[t[o+14]]+n[t[o+15]]).toLowerCase()}(a)}const a=t=>{const o=new Map;return t.filter((t=>!o.has(t.id)&&o.set(t.id,1)))},d=()=>s().split("-").join(""),u=t=>new Promise(((o,r)=>{const n=new FileReader;n.readAsDataURL(t),n.onload=()=>o(n.result),n.onerror=t=>r(t)}));export{u as b,d as g,a as u};
